/users/register:
  post:
    tags:
      - Users üßë‚Äçüíª
    summary: Register a new user
    description: Registers a new user in the application with the provided details.
    operationId: register
    x-eov-operation-handler: authController
    requestBody:
      description: User registration data
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - firstname
              - lastname
              - email
              - password
            properties:
              firstname:
                type: string
                description: The first name of the user.
                example: John
              lastname:
                type: string
                description: The last name of the user.
                example: Doe
              email:
                type: string
                format: email
                description: The email address of the user.
                example: john.doe@example.com
              password:
                type: string
                format: password
                description: The password for the user account. It must be at least 8 characters long and contain at least one number and one special character.
                example: Password123!
    responses:
      201:
        $ref: '#/components/responses/UserRegistered'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      409:
        $ref: '#/components/responses/Conflict'
      500:
        $ref: '#/components/responses/InternalServerError'

/users/login:
  post:
    tags:
      - Users üßë‚Äçüíª
    summary: User login
    description: Authenticates a user with the provided email and password.
    operationId: login
    x-eov-operation-handler: authController
    requestBody:
      description: User login data
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                description: The email address of the user.
                example: john.doe@example.com
              password:
                type: string
                format: password
                description: The password for the user account.
                example: Password123!
    responses:
      200:
        $ref: '#/components/responses/UserLogged'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/InternalServerError'

/users:
  get:
    tags:
      - Users üßë‚Äçüíª
    summary: Retrieve a list of users
    description: Fetches a paginated list of users registered in the platform. You can use filters like search terms, pagination, and ordering to refine the results.
    operationId: findAndCountAll
    x-eov-operation-handler: userController
    parameters:
      - name: page
        in: query
        description: The page number for pagination.
        required: false
        schema:
          type: integer
          format: int64
          default: 0
      - name: limit
        in: query
        description: The limit of results per page.
        required: false
        schema:
          type: integer
          format: int64
          default: 10
      - name: find
        in: query
        description: A search term to filter results.
        required: false
        schema:
          type: string
          default: ''
        allowReserved: true
      - name: order
        in: query
        description: >
          Order of the results:

            - `a-z` - Order by firstname ascending. From A to Z
            - `z-a` - Order by firstname descending. From Z to A
        required: false
        schema:
          type: string
          enum:
            - a-z
            - z-a
          default: a-z
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: integer
                  format: int64
                  description: HTTP status code indicating a successful operation.
                  default: 200
                message:
                  type: string
                  description: Descriptive message of the operation.
                  default: OK
                count:
                    type: integer
                    format: int64
                    description: The total number of users found.
                    default: 1
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
              required:
                - statusCode
                - message
                - count
                - data
              additionalProperties: false
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      409:
        $ref: '#/components/responses/Conflict'
      500:
        $ref: '#/components/responses/InternalServerError'

/users/{userId}:
  get:
    tags:
      - Users üßë‚Äçüíª
    summary: Retrieve a user's details
    description: Fetches the detailed information of a user based on their unique identifier.
    operationId: findById
    x-eov-operation-handler: userController
    parameters:
      - name: userId
        in: path
        required: true
        description: The unique identifier of the user to be retrieved.
        schema:
          type: string
    responses:
      200:
        description: OK
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  type: integer
                  format: int64
                  description: HTTP status code indicating a successful operation.
                  default: 200
                message:
                  type: string
                  description: Descriptive message of the operation.
                  default: User details retrieved successfully
                data:
                  $ref: '#/components/schemas/User'
              required:
                - statusCode
                - message
                - data
              additionalProperties: false
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/Unauthorized'
      403:
        $ref: '#/components/responses/Forbidden'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/InternalServerError'
